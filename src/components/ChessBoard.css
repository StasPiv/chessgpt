.piece.dragging {
    transform: translateY(-10px) !important;
    z-index: 10000 !important;
    pointer-events: none !important;
    cursor: grabbing !important;
}

.react-grid-item .piece.dragging {
    z-index: 10000 !important;
    pointer-events: none !important;
    transform: translateY(-10px) !important;
    position: fixed !important;
    cursor: grabbing !important;
}

/* Add smooth animation */
.piece {
    transition: transform 0.1s ease-out;
    cursor: grab;
}

.piece:hover {
    transform: translateY(-2px);
}

/* Fixed chess board container styles to fit width and maintain square aspect ratio */
.react-grid-item .chess-board-container {
    width: 100%;
    height: 100%;
    display: flex;
    align-items: flex-start;
    justify-content: center;
    overflow: visible;
    padding: 10px;
    box-sizing: border-box;
}

.chess-board-container {
    width: 100%;
    height: 100%;
    display: flex;
    align-items: flex-start;
    justify-content: center;
    overflow: visible;
    padding: 10px;
    box-sizing: border-box;
}

/* ИСПРАВЛЕННОЕ ПРАВИЛО - более специфичный селектор */
/* Применяется только к прямому потомку, НЕ к перетаскиваемым элементам */
.chess-board-container > div:not([style*="position: fixed"]) {
    width: 100% !important;
    height: auto !important;
    aspect-ratio: 1 / 1 !important;
    max-width: calc(100% - 20px) !important;
}

/* Ensure the chessboard itself maintains square shape and fits container width */
.chess-board-container > div > div {
    width: 100% !important;
    height: 100% !important;
    aspect-ratio: 1 / 1 !important;
}

/* Override any height stretching from react-chessboard */
.chess-board-container .react-chessboard {
    width: 100% !important;
    height: auto !important;
    aspect-ratio: 1 / 1 !important;
}

/* Ensure board squares maintain proper proportions */
.react-chessboard [data-square] {
    transition: background-color 0.2s ease;
    aspect-ratio: 1 / 1 !important;
}

/* Styles for react-chessboard pieces */
.react-chessboard [data-piece] {
    transition: transform 0.15s ease-out, box-shadow 0.15s ease-out, filter 0.15s ease-out;
    cursor: grab !important;
    border-radius: 4px;
}

.react-chessboard [data-piece]:hover {
    transform: translateY(-3px) scale(1.05);
    box-shadow: 0 6px 12px rgba(0,0,0,0.25);
    filter: brightness(1.1);
}

/* Animation for move completion */
@keyframes pieceSettle {
    0% {
        transform: translateY(-5px) scale(1.0);
    }
    50% {
        transform: translateY(2px) scale(1.0);
    }
    100% {
        transform: translateY(0) scale(1.0);
    }
}

.react-chessboard [data-piece]:not([style*="cursor: grabbing"]) {
    animation: pieceSettle 0.3s ease-out;
}

#chess-board-board {
    overflow: unset !important;
}