import React, { ReactElement, useState, useEffect } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { RootState } from '../types';
import { setIsFullscreenAction } from '../redux/actions.js';
import fullscreenManager from '../utils/FullscreenManager.js';
import './FullScreenHint.scss';

const FullScreenHint = (): ReactElement | null => {
    const [isVisible, setIsVisible] = useState(false);
    const [hasInteracted, setHasInteracted] = useState(false);
    const dispatch = useDispatch();
    const isMobile = useSelector((state: RootState) => state.ui.isMobile);
    const isFullscreen = useSelector((state: RootState) => state.ui.isFullscreen);

    // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
    useEffect(() => {
        const unsubscribe = fullscreenManager.addListener((isFullscreen: boolean) => {
            dispatch(setIsFullscreenAction(isFullscreen));
        });
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        dispatch(setIsFullscreenAction(fullscreenManager.isInFullscreen()));
        
        return unsubscribe;
    }, [dispatch]);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É —Ç–æ–ª—å–∫–æ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö, –µ—Å–ª–∏ –Ω–µ –≤ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ
    useEffect(() => {
        if (isMobile && !isFullscreen) {
            if (!hasInteracted) {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
                const timer = setTimeout(() => {
                    setIsVisible(true);
                }, 2000);

                return () => clearTimeout(timer);
            } else {
                // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞–ª, –Ω–æ –≤—ã—à–µ–ª –∏–∑ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞,
                // –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É —Å—Ä–∞–∑—É
                setIsVisible(true);
            }
        } else {
            setIsVisible(false);
        }
    }, [isMobile, isFullscreen, hasInteracted]);

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥ (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –ø–æ–∫–∞–∑–∞)
    useEffect(() => {
        if (isVisible && !hasInteracted) {
            const timer = setTimeout(() => {
                setIsVisible(false);
                setHasInteracted(true);
            }, 10000);

            return () => clearTimeout(timer);
        }
    }, [isVisible, hasInteracted]);

    const handleFingerClick = async () => {
        setHasInteracted(true);
        setIsVisible(false);

        try {
            // –í–∏–±—Ä–æ–æ—Ç–∫–ª–∏–∫ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            if ('vibrate' in navigator) {
                navigator.vibrate(50);
            }

            await fullscreenManager.requestFullscreen();
        } catch (error) {
            console.log('Fullscreen request failed:', error);
        }
    };

    const handleDismiss = () => {
        setHasInteracted(true);
        setIsVisible(false);
    };

    // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –µ—Å–ª–∏ –Ω–µ –º–æ–±–∏–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏–ª–∏ –Ω–µ –≤–∏–¥–∏–º—ã–π
    if (!isMobile || !isVisible) {
        return null;
    }

    return (
        <div className="fullscreen-hint-overlay">
            <div className="fullscreen-hint-container">
                {/* –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è */}
                <button 
                    className="hint-close-btn"
                    onClick={handleDismiss}
                    aria-label="–ó–∞–∫—Ä—ã—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É"
                >
                    ‚úï
                </button>

                {/* –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞–ª–µ—Ü */}
                <div 
                    className="finger-animation"
                    onClick={handleFingerClick}
                >
                    <div className="finger">
                        üëÜ
                    </div>
                    <div className="swipe-trail"></div>
                </div>

                {/* –¢–µ–∫—Å—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏ */}
                <div className="hint-text">
                    <div className="hint-title">–ü–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º</div>
                    <div className="hint-description">
                        {hasInteracted ? 
                            '–í–æ–π–¥–∏—Ç–µ –≤ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏–≥—Ä—ã' :
                            '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–∞–ª–µ—Ü –∏–ª–∏ –ø—Ä–æ–≤–µ–¥–∏—Ç–µ –≤–≤–µ—Ä—Ö –¥–ª—è –ª—É—á—à–µ–≥–æ –∏–≥—Ä–æ–≤–æ–≥–æ –æ–ø—ã—Ç–∞'
                        }
                    </div>
                </div>

                {/* –°—Ç—Ä–µ–ª–∫–∞ –≤–≤–µ—Ä—Ö */}
                <div className="arrow-up">
                    ‚Üë
                </div>
            </div>
        </div>
    );
};

export default FullScreenHint;